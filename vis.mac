#
# Macro file for the initialization phase of "LXe.cc"
# when runing in interactive mode
#
# Sets some default verbose
#
/run/verbose 2
/control/verbose 2
#
# Create a scene handler/viewer for a specific graphics system
#    The compound command "/vis/open <vis-driver-name>"
#    is equivalent to the following set of commands:
#
#    /vis/sceneHandler/create
#    /vis/viewer/create
#
# Create a scene handler and a viewer for the OGLIX driver
# (uncomment to create a light file)
/vis/open OGL 600x600-0+0

#Set an environmental variable  G4VRMLFILE_VIEWER
#if you want to visualize the generated VRML file
#automatically.  For example, 
#    setenv  G4VRMLFILE_VIEWER  vrwave 
# (this produces a heavy .wrl file)
#/vis/open VRML2FILE

#
/vis/viewer/set/style wireframe
# Set direction from target to camera.
#/vis/viewer/set/viewpointVector 1 1.5 1.1
/vis/viewer/set/viewpointVector 0 -3 0.1
#/vis/viewer/set/viewpointThetaPhi 90 90 deg
#/vis/viewer/zoom 1.4
#
#    The compound command "/vis/drawVolume"
#    is equivalent to the following set of commands:
#
#    /vis/scene/create
#    /vis/scene/add/volume
#    /vis/sceneHandler/attach
# Create an empty scene and add the detector geometry to it

/run/initialize

/vis/drawVolume

#
# Store particle trajectories for visualization
# (if too many tracks cause core dump => storeTrajectory 0)
/tracking/storeTrajectory 1
#
# Add trajectories to the current scene
# Note: This command is not necessary since the C++ method DrawTrajectory()
#       is called in LXeEventAction::EndOfEventAction
#/vis/scene/add/trajectories
#
# Requests viewer to accumulate hits, tracks, etc. at end of event. 
# detector remains or is redrawn.
# WARNING: The vis manager will keep up to 100 events.
#  This may use a lot of memory.
#  It may be changed with, e.g., "/vis/scene/endOfEventAction accumulate 10".
/vis/scene/endOfEventAction accumulate 1
/run/beamOn 1

